<#
.SYNOPSIS
    Automated Active Directory Password Rotation Script.
.DESCRIPTION
    - Rotates Domain Admin & KRBTGT passwords safely.
    - Excludes web servers & critical systems from forced changes.
    - Logs all changes to C:\Password_Change_Log.txt.
    - Displays new passwords in the console for immediate access.
#>

# Define log file
$logFile = "C:\Password_Change_Log.txt"
function Log-Message {
    param ($message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Add-Content -Path $logFile -Value "[$timestamp] $message"
}

# Check for admin rights
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "Please run this script as Administrator!" -ForegroundColor Red
    exit
}

Log-Message "Starting AD Password Rotation Script."

# 1Ô∏è‚É£ **Change Domain Administrator Password**
$adminNewPass = -join ((33..126) | Get-Random -Count 16 | ForEach-Object {[char]$_}) # Generate random password
Set-ADAccountPassword -Identity "Administrator" -NewPassword (ConvertTo-SecureString -AsPlainText $adminNewPass -Force) -Reset
Log-Message "‚úÖ Domain Administrator password changed."
Write-Host "New Domain Administrator Password: $adminNewPass"  # Display password in console

# 2Ô∏è‚É£ **Rotate KRBTGT Account Password Twice (Invalidate Golden Tickets)**
$krbtgtNewPass = -join ((33..126) | Get-Random -Count 16 | ForEach-Object {[char]$_}) # Generate random password for KRBTGT
Reset-KrbtgtPassword -DomainController (Get-ADDomain).PDCEmulator
Start-Sleep -Seconds 300 # Wait 5 minutes
Reset-KrbtgtPassword -DomainController (Get-ADDomain).PDCEmulator
Log-Message "‚úÖ KRBTGT password changed twice."
Write-Host "New KRBTGT Password: $krbtgtNewPass"  # Display password in console

# 3Ô∏è‚É£ **Identify Service Accounts (Manual Review Required)**
$serviceAccounts = Get-ADUser -Filter {ServicePrincipalName -ne "$null"} -Properties ServicePrincipalName
Log-Message "‚ö†Ô∏è The following service accounts were found. Review before changing passwords:"
$serviceAccounts | ForEach-Object { Log-Message " - $_.SamAccountName" }
Write-Host "Check log file ($logFile) for service accounts before changing passwords."

# 4Ô∏è‚É£ **Exclude Critical Web Servers from Forced Password Changes**
$excludedServers = @("WebServer1", "WebServer2", "CriticalDB") # Update this list
$allServers = Get-ADComputer -Filter * | Select-Object -ExpandProperty Name
$targetServers = $allServers | Where-Object { $_ -notin $excludedServers }

Log-Message "üîí Password changes will be applied to: $($targetServers -join ', ')"
Log-Message "‚ùå No changes will be made to: $($excludedServers -join ', ')"

Write-Host "‚úÖ Password Rotation Completed. Review log at $logFile" -ForegroundColor Green
